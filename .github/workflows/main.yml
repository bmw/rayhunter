name: main

on:
  push:
    branches: [ installer-gui, main ]
  pull_request:
    branches: [ main ]
  workflow_call:  # required to call this workflow from another workflow like release.yml

env:
  CARGO_TERM_COLOR: always
  FILE_ROOTSHELL: ../../rootshell/rootshell
  FILE_RAYHUNTER_DAEMON: ../../rayhunter-daemon/rayhunter-daemon
  RUSTFLAGS: "-Dwarnings"
  TAURI_LINUX_DEPS: "libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev xdg-utils"

jobs:
  build_rootshell:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: armv7-unknown-linux-musleabihf
      - uses: Swatinem/rust-cache@v2
      - name: Build rootshell (armv7)
        run: cargo build -p rootshell --bin rootshell --target armv7-unknown-linux-musleabihf --profile=firmware
      - uses: actions/upload-artifact@v4
        with:
          name: rootshell
          path: target/armv7-unknown-linux-musleabihf/firmware/rootshell
          if-no-files-found: error

  build_rayhunter:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: armv7-unknown-linux-musleabihf
      - uses: Swatinem/rust-cache@v2
      - name: Update package list
        run: sudo apt-get update
      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: gcc-arm-linux-gnueabihf ${{ env.TAURI_LINUX_DEPS }}
          version: 1.0
      - name: Build rayhunter-daemon (armv7)
        run: |
          pushd daemon/web
          npm install
          npm run build
          popd
          # Run with -p so that cargo will select the minimum feature set for this package.
          #
          # Otherwise, it will consider the union of all requested features
          # from all packages in the workspace. For example, if installer
          # requires tokio with "full" feature, it will be included no matter
          # what the feature selection in rayhunter-daemon is.
          #
          # https://github.com/rust-lang/cargo/issues/4463
          CC_armv7_unknown_linux_musleabihf=arm-linux-gnueabihf-gcc cargo build-daemon-firmware
      - uses: actions/upload-artifact@v4
        with:
          name: rayhunter-daemon
          path: target/armv7-unknown-linux-musleabihf/firmware/rayhunter-daemon
          if-no-files-found: error

  build_rust_installer:
    permissions:
      contents: read
      packages: write
    needs:
      - build_rayhunter
      - build_rootshell
    strategy:
      matrix:
        platform:
          - name: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - name: linux-armv7
            os: ubuntu-latest
            target: armv7-unknown-linux-musleabi
          - name: linux-aarch64
            os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
          - name: macos-arm
            os: macos-latest
            target: aarch64-apple-darwin
          - name: macos-intel
            os: macos-latest
            target: x86_64-apple-darwin
          - name: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-gnu
    runs-on: ${{ matrix.platform.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      - uses: Swatinem/rust-cache@v2
      - run: cargo build --package installer --bin installer --release --target ${{ matrix.platform.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.platform.name }}
          path: target/${{ matrix.platform.target }}/release/installer${{ matrix.platform.os == 'windows-latest' && '.exe' || '' }}
          if-no-files-found: error

  build_installer_gui_linux:
    permissions:
      contents: read
      packages: write
    needs:
      - build_rust_installer
    strategy:
      matrix:
        platform:
          # we want to use the oldest supported version of ubuntu here to
          # maximize compatibility with older versions of glibc
          - name: linux-x64
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - name: linux-aarch64
            os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
    runs-on: ${{ matrix.platform.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Install tauri linux dependencies
        run: sudo apt-get update
      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: ${{ env.TAURI_LINUX_DEPS }}
          version: 1.0
      - name: Build GUI installer
        env:
          INSTALLER_PATH: "${{ github.workspace }}/installer-${{ matrix.platform.name }}/installer"
        shell: bash
        run: |
          cd installer-gui
          npm install
          chmod +x "$INSTALLER_PATH"
          npm run tauri build -- --target ${{ matrix.platform.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: gui-installer-${{ matrix.platform.name }}-appimage
          path: target/${{ matrix.platform.target }}/release/bundle/appimage/*.AppImage
          if-no-files-found: error
      - uses: actions/upload-artifact@v4
        with:
          name: gui-installer-${{ matrix.platform.name }}-deb
          path: target/${{ matrix.platform.target }}/release/bundle/deb/*.deb
          if-no-files-found: error
      - uses: actions/upload-artifact@v4
        with:
          name: gui-installer-${{ matrix.platform.name }}-rpm
          path: target/${{ matrix.platform.target }}/release/bundle/rpm/*.rpm
          if-no-files-found: error

  build_installer_gui_macos:
    permissions:
      contents: read
      packages: write
    needs:
      - build_rust_installer
    strategy:
      matrix:
        platform:
          - arch: ARM
            name: macos-arm
            target: aarch64-apple-darwin
          - arch: Intel
            name: macos-intel
            target: x86_64-apple-darwin
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Build GUI installer
        env:
          INSTALLER_PATH: "${{ github.workspace }}/installer-${{ matrix.platform.name }}/installer"
        shell: bash
        run: |
          cd installer-gui
          npm install
          chmod +x "$INSTALLER_PATH"
          npm run tauri build -- --target ${{ matrix.platform.target }}
          SRC="../target/${{ matrix.platform.target }}/release/bundle/macos/Rayhunter Installer.app"
          mv "$SRC" "../Rayhunter Installer - ${{ matrix.platform.arch }}.app"
      - uses: actions/upload-artifact@v4
        with:
          name: gui-installer-${{ matrix.platform.arch }}-app
          path: "*.app"
          if-no-files-found: error
      - uses: actions/upload-artifact@v4
        with:
          name: gui-installer-${{ matrix.platform.arch }}-dmg
          path: target/${{ matrix.platform.target }}/release/bundle/dmg/*.dmg
          if-no-files-found: error

  build_installer_windows:
    permissions:
      contents: read
      packages: write
    needs:
      - build_rust_installer
    env:
      TARGET: x86_64-pc-windows-msvc
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ env.TARGET }}
      - uses: Swatinem/rust-cache@v2
      - name: Build GUI installer
        shell: bash
        env:
          INSTALLER_PATH: "${{ github.workspace }}/installer-windows-x86_64/installer.exe"
        run: |
          cd installer-gui
          npm install
          chmod +x "$INSTALLER_PATH"
          npm run tauri build -- --target ${{ env.TARGET }}
      - uses: actions/upload-artifact@v4
        with:
          name: gui-installer-msi
          path: target/${{ env.TARGET }}/release/bundle/msi/*.msi
          if-no-files-found: error
      - uses: actions/upload-artifact@v4
        with:
          name: gui-installer-exe
          path: target/${{ env.TARGET }}/release/bundle/nsis/*.exe
          if-no-files-found: error
